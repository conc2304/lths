{
  "root": true,
  "ignorePatterns": [
    "**/*"
  ],
  "parser": "",
  "plugins": [
    "@nrwl/nx",
    "import"
  ],
  "globals": {
    "JSX": true
  },
  "overrides": [
    {
      "files": [
        "*.ts",
        "*.tsx",
        "*.js",
        "*.jsx"
      ],
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": [
                  "*"
                ]
              }
            ]
          }
        ],
        "import/order": [
          "error",
          {
            "newlines-between": "always",
            "distinctGroup": false,
            "pathGroups": [
              {
                "pattern": "react",
                "group": "external",
                "position": "before"
              },
              {
                "pattern": "@mui/material",
                "group": "external",
                "position": "before"
              },
              {
                "pattern": "@mui/**",
                "group": "external",
                "position": "before"
              },
              {
                "pattern": "**/*.+(css|sass|less|scss|pcss|styl)",
                "patternOptions": {
                  "dot": true,
                  "nocomment": true
                },
                "group": "unknown",
                "position": "after"
              },
              {
                "pattern": "{.,..}/**/*.+(css|sass|less|scss|pcss|styl)",
                "patternOptions": {
                  "dot": true,
                  "nocomment": true
                },
                "group": "unknown",
                "position": "after"
              }
            ],
            "pathGroupsExcludedImportTypes": [
              "react"
            ],
            "warnOnUnassignedImports": true,
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true
            },
            "groups": [
              [
                "builtin",
                "external",
                "internal"
              ],
              // space between
              [
                "parent",
                "sibling",
                "index"
              ],
              // space between
              [
                "type",
                "object",
                "unknown"
              ]
            ]
          }
        ]
      }
    },
    {
      "files": [
        "*.ts",
        "*.tsx"
      ],
      "extends": [
        "plugin:@nrwl/nx/typescript"
      ],
      "rules": {
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "ignoreRestSiblings": true,
            "destructuredArrayIgnorePattern": "[A-Z]",
            "caughtErrors": "none"
          }
        ],
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "{}": {
                "message": "If you want a type meaning 'any object', you probably want `Record<string, unknown>` instead. If you want a type meaning 'any value', you probably want `unknown` instead. If you want a type meaning 'empty object', you probably want `Record<string, never>` instead.",
                "fixWith": "Record<string, unknown>"
              },
              "String": {
                "message": "Use string instead",
                "fixWith": "string"
              },
              "Number": {
                "message": "Use number instead",
                "fixWith": "number"
              },
              "Boolean": {
                "message": "Use boolean instead",
                "fixWith": "boolean"
              },
              "Function": {
                "message": "The Function type accepts any function-like value. It provides no type safety when calling the function, which can be a common source of bugs. It also accepts things like class declarations, which will throw at runtime as they will not be called with new. For a function that takes no args and returns nothing use: `()=> void`",
                "fixWith": "(...args: unknown) => unknown"
              },
              "any": {
                "message": "`unknown` is recommended over `any` because it provides safer typing â€” you have to use type assertion or narrow to a specific type if you want to perform operations on unknown.",
                "fixWith": "unknown"
              }
            },
            "extendDefaults": true
          }
        ],
        "no-undef": "error"
      }
    },
    {
      "files": [
        "*.js",
        "*.jsx"
      ],
      "extends": [
        "plugin:@nrwl/nx/javascript"
      ],
      "rules": {
        "no-unused-vars": "error",
        "no-undef": "error"
      }
    },
    {
      "files": [
        "*.spec.ts",
        "*.spec.tsx",
        "*.spec.js",
        "*.spec.jsx"
      ],
      "env": {
        "jest": true
      },
      "rules": {}
    }
  ]
}