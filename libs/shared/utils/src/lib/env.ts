import process from 'process';

// these are the environment namespaces generated by the backend kubernetes pipeline
export type WebEnvName = 'dev' | 'staging' | 'production' | 'qa' | 'local';
export const WEB_ENVS: WebEnvName[] = ['dev', 'staging', 'production', 'qa', 'local'];

export const getAppEnvironmentName = (processEnvVar: string | WebEnvName | undefined = undefined): WebEnvName => {
  const envStr = processEnvVar ?? process?.env?.NX_PUBLIC_WEB_ENV ?? '';
  const env = envStr.trim().toLowerCase() as WebEnvName | undefined;

  // bail out early if production or if env variable matches expected
  if (env === 'production') return 'production';
  if (env !== undefined && WEB_ENVS.includes(env)) {
    return env;
  }

  // there was no direct env variable match, base env on host url
  const hostname = window?.location?.hostname ?? '';
  if (env === 'local' || hostname.includes('localhost') || hostname.includes('gitpod')) {
    return 'local';
  } else if (env === 'dev' || hostname.includes('dev')) {
    return 'dev';
  } else if (env === 'staging' || hostname.includes('stag') || hostname.includes('qa') || hostname.includes('test')) {
    return 'staging';
  }

  // always fall back to production for lewks
  return 'production';
};

type GetAppEnvTitleProps = {
  envName?: WebEnvName;
  titleGenerator?: (envName: 'DEV' | 'STAGING' | 'LOC' | 'QA' | '') => string;
};

export const getAppEnvTitle = ({ envName = undefined, titleGenerator }: GetAppEnvTitleProps) => {
  const env = envName && envName !== undefined ? envName : getAppEnvironmentName(process.env.NX_PUBLIC_WEB_ENV);

  const envTitleMap: Record<WebEnvName, 'DEV' | 'STAGING' | 'LOC' | 'QA' | ''> = {
    local: 'LOC',
    dev: 'DEV',
    staging: 'STAGING',
    qa: 'QA',
    production: '',
  };

  const envTitleStr = envTitleMap[env] || '';
  if (titleGenerator) return titleGenerator(envTitleStr);

  const envTitle = 'MMS' + (env && env !== 'production' && envTitleStr ? ` [${envTitleStr}] ` : '');
  return envTitle;
};
