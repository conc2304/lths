import process from 'process';

// these are the environment namespaces generated by the backend kubernetes pipeline
export type WebEnvName = 'dev' | 'staging' | 'production' | 'qa' | 'local';

export const getAppEnvironmentName = (processEnvVar: string | WebEnvName | undefined = undefined): WebEnvName => {
  const env = processEnvVar || process?.env.NX_PUBLIC_WEB_ENV || undefined;

  if (env) return env as WebEnvName;

  // fallback to parsing the env from the url
  const hostname = window?.location?.hostname;
  if (hostname) {
    if (hostname.includes('localhost') || hostname.includes('gitpod')) return 'local';
    if (hostname.includes('dev')) return 'dev';
    if (hostname.includes('staging') || hostname.includes('qa')) return 'staging';
  }

  return 'production';
};

type GetAppEnvTitleProps = {
  envName?: WebEnvName;
  titleGenerator?: (envName: 'DEV' | 'STAGING' | 'LOC' | 'QA' | '') => string;
};

export const getAppEnvTitle = ({ envName = undefined, titleGenerator }: GetAppEnvTitleProps) => {
  const env = envName ? envName : getAppEnvironmentName(process.env.NX_PUBLIC_WEB_ENV);
  const envTitleMap: Record<WebEnvName, 'DEV' | 'STAGING' | 'LOC' | 'QA' | ''> = {
    local: 'LOC',
    dev: 'DEV',
    staging: 'STAGING',
    qa: 'QA',
    production: '',
  };

  const envTitleStr = envTitleMap[env] || '';
  if (titleGenerator) return titleGenerator(envTitleStr);

  const envTitle = 'MMS' + (env && env !== 'production' ? ` [${envTitleMap[env]}] ` : envTitleMap?.[env] || '');
  return envTitle;
};
